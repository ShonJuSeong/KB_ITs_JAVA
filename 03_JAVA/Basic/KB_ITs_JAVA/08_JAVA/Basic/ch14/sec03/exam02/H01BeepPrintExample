package ch14.sec03.exam02;

import java.awt.Toolkit;
//java.awt.Toolkit : 소리(beep)를 내거나, 컴퓨터 기본 기능을 쓰게 해주는 클래스

public class H01BeepPrintExample {
    public static void main(String[] args) {
        Thread thread = new Thread(new Runnable() {
            //Thread : 새로운 **작업 흐름(스레드)**을 만든다.
            //thread : 새로 만든 스레드를 담는 변수 이름.
            //new Thread(...) : 새 스레드를 생성한다.
            //new Runnable() { ... } : 스레드 안에서 할 일을 정의하는 코드.
            @Override
            //부모에 있는 run() 메서드를 다시 정의(overriding)하고 있다는 표시.
        public void run() {
                //public : 누구나 접근 가능하다.
                //void : 반환 값이 없다.
                //run() : 스레드가 시작될 때 자동으로 실행되는 메서드.
                Toolkit toolkit = Toolkit.getDefaultToolkit();
                //Toolkit : Toolkit 타입의 변수를 선언.
                //toolkit : Toolkit 객체를 저장할 변수 이름.
                //Toolkit.getDefaultToolkit() : 기본 Toolkit 객체를 가져온다. (컴퓨터의 기능 사용 준비)
                for (int i = 0; i < 5; i++) {
                    //for : 반복문. 5번 반복한다.
                    //int i = 0 : 반복변수 i를 0으로 시작.
                    //i < 5 : i가 5보다 작을 때까지 반복
                    //i++ : 반복할 때마다 i를 1씩 증가.
                    toolkit.beep();
                    //toolkit : 위에서 만든 Toolkit 객체.
                    //.beep() : 삐 소리(beep)를 낸다.
                    try {
                        Thread.sleep(500);} catch(Exception e){}
                    //try : 오류가 날 수도 있는 코드를 감싸서 실행한다.
                    //Thread.sleep(500); : 0.5초(500ms) 동안 잠시 멈춘다. (기다림)
                    //catch(Exception e) : 만약 오류가 나면 처리하는 곳.
                    //{} : 오류를 무시하고 그냥 넘어간다.
                    }
                //for문 종료.
                    }
                });
        //Runnable 객체 생성 종료.
        //Thread 생성자 종료.
                thread.start();
                //thread : 위에서 만든 스레드 객체.
                //.start() : 스레드를 시작한다. (run() 메서드가 실행된다.)
                for(int i = 0; i<5; i++){
                    //for : 또다른 반복문.
                    //int i = 0 : i를 0으로 시작.
                    //i < 5 : i가 5보다 작을 때 반복
                    //i++ : 반복할 때마다 i를 1씩 증가.
                    System.out.println("띵");
                    try {Thread.sleep(500);} catch(Exception e){}
                    //try : 오류가 날 수도 있는 코드를 시도.
                    //Thread.sleep(500); : 0.5초 동안 멈춘다.
                    //catch(Exception e){} : 오류가 나더라도 그냥 무시.
                }

        }
    }





//○ 작업1: 0.5초간격으로비프음출력
//▪ Runnable 인터페이스를이용하여작업스레드에서실행
//○ 작업2: 0.5초간격으로"띵" 문자열출력
//▪ Main 스레드에서실행
