package ch08.sec10.exam02;

public interface Vehicle {
    //추상 메소드
    void run();
}

//public: 공개. 다른 패키지에서도 이 인터페이스를 쓸 수 있음.
//interface: 인터페이스 선언. 설계도처럼, "이런 기능이 있어야 해!" 라고 틀을 강제하는 것.
//Vehicle: 인터페이스 이름. **"탈 것"**이라는 뜻.
//{}: 인터페이스의 몸통.
//void: 리턴값 없음. 즉, 아무것도 돌려주지 않음.
//run(): 메소드 이름. "달리다", "운행하다" 같은 의미.
//괄호는 메소드임을 표시.
//;: 여기서는 구현 없이 선언만 한다는 뜻.
//→ 즉, Vehicle 인터페이스는 run()이라는 "달릴 수 있는 기능"만을 약속한다.
//
//✅ 여기서 질문한 것:
//왜 void run();를 쓰는가?
//→ "Vehicle"은 "운행할 수 있는 모든 탈 것"을 뜻해.
//모든 Vehicle은 달릴 수 있어야 한다는 것을 "규칙"처럼 강제하는 거야.
//그래서 "달릴 기능"인 run()을 인터페이스 안에 꼭 선언해주는 거지.
//즉, 인터페이스는 기능 목록(규칙)만 적어주고,
//어떻게 동작하는지는 나중에 만든 클래스(Bus)가 알아서 채우게 한다.